openapi: 3.0.0
info:
  title: Authentication Service API
  description: Микросервис для аутентификации и управления пользователями
  version: 1.0.0
servers:
  - url: http://localhost:8081
    description: Локальный сервер
  - url: https://auth.your-service.com
    description: Production сервер

tags:
  - name: Auth
    description: Аутентификация и токены
  - name: Users
    description: Управление пользователями

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Аутентификация пользователя
      description: Возвращает JWT токен для доступа к API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Обновление токена
      description: Возвращает новый access token по refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Токен успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Невалидный refresh token

  /users/register:
    post:
      tags: [Users]
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserRequest'
      responses:
        '201':
          description: Пользователь создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '409':
          description: Пользователь уже существует

components:
  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "P@ssw0rd!"

    RegisterUserRequest:
      type: object
      required:
        - login
        - password
        - email
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        login:
          type: string
          example: "user"
        password:
          type: string
          format: password
          minLength: 8
          example: "P@ssw0rd!"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expiresIn:
          type: integer
          example: 3600
        tokenType:
          type: string
          example: "Bearer"

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    ValidateTokenRequest:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

    TokenValidationResponse:
      type: object
      properties:
        isValid:
          type: boolean
          example: true
        claims:
          type: object
          properties:
            sub:
              type: string
              example: "user123"
            roles:
              type: array
              items:
                type: string
              example: ["ROLE_USER"]

    UserResponse:
      type: object
      properties:
        login:
          type: string
          example: "user123"
        email:
          type: string
          example: "user@example.com"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        message:
          type: string
          example: "Authentication failed"
        status:
          type: integer
          example: 401
        timestamp:
          type: string
          format: date-time
          example: "2023-01-01T00:00:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT токен для аутентификации"